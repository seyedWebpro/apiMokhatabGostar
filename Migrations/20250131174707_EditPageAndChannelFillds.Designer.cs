// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(apiContext))]
    [Migration("20250131174707_EditPageAndChannelFillds")]
    partial class EditPageAndChannelFillds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("TariffId");

                    b.ToTable("campaignChannels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Instagram");

                    b.Property<string>("PricePageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignMusicSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("MusicSiteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SiteAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("MusicSiteId");

                    b.HasIndex("TariffId");

                    b.ToTable("campaignMusicSites");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Engagement")
                        .HasColumnType("float");

                    b.Property<int?>("Followesrs")
                        .HasColumnType("int");

                    b.Property<int?>("Following")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("PostLikes")
                        .HasColumnType("int");

                    b.Property<string>("PostLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostViews")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShowName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoryImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("StoryViews")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<string>("TelegramID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("postComments")
                        .HasColumnType("int");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PageId");

                    b.HasIndex("TariffId");

                    b.ToTable("CampaignPages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.ChartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Horezntial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vertical")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("charts");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CombinedTariffModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TariffNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CombinedTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoriteMusicSiteModel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MusicSiteId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MusicSiteId");

                    b.HasIndex("MusicSiteId");

                    b.ToTable("FavoriteMusicSiteModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoritePagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritePagesModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoriteTelegramChannelModel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TelegramChannelId");

                    b.HasIndex("TelegramChannelId");

                    b.ToTable("FavoriteTelegramChannels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.MusicSiteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("musicSiteModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.MusicSiteTarefeModel", b =>
                {
                    b.Property<int>("MusicSiteId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("MusicSiteId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("musicSiteTarefeModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Engagement")
                        .HasColumnType("float");

                    b.Property<int?>("Followesrs")
                        .HasColumnType("int");

                    b.Property<int?>("Following")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageTypeCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("PostLikes")
                        .HasColumnType("int");

                    b.Property<string>("PostLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostViews")
                        .HasColumnType("int");

                    b.Property<string>("ShowName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoryImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("StoryViews")
                        .HasColumnType("int");

                    b.Property<string>("TelegramID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("postComments")
                        .HasColumnType("int");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PageTypeCategoryId");

                    b.HasIndex("PageTypeId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTag", b =>
                {
                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PageId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PageTags");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTariffModel", b =>
                {
                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PageId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("PageTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTypeCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("pageTypeCategories");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("pageTypes");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("PostLikes")
                        .HasColumnType("int");

                    b.Property<string>("PostLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostViews")
                        .HasColumnType("int");

                    b.Property<string>("ShowName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoryImpertion")
                        .HasColumnType("int");

                    b.Property<int?>("StoryViews")
                        .HasColumnType("int");

                    b.Property<int?>("postComments")
                        .HasColumnType("int");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PageId");

                    b.ToTable("pageVersions");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PricePageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("HamkarPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Normalprice")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("pricePages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PricePageTitleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("pricePageTitles");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.ScreenshotModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("InstagramPageId")
                        .HasColumnType("int");

                    b.Property<int?>("MusicSiteId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenshotUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("InstagramPageId");

                    b.HasIndex("MusicSiteId");

                    b.HasIndex("UserId");

                    b.ToTable("screenshotModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TarefeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("tarefeModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelCombinedTariffModel", b =>
                {
                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("int");

                    b.Property<int>("CombinedTariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TelegramChannelId", "CombinedTariffId");

                    b.HasIndex("CombinedTariffId");

                    b.ToTable("TelegramChannelCombinedTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("telegramChannels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelTariffModel", b =>
                {
                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TelegramChannelId", "TariffId");

                    b.HasIndex("TariffId");

                    b.ToTable("telegramChannelTariffModels");
                });

            modelBuilder.Entity("chat", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<string>("datetime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("phonenumber1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phonenumber2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("chatcontact", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isblock")
                        .HasColumnType("bit");

                    b.Property<string>("lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("chatContacts");
                });

            modelBuilder.Entity("company", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<string>("companyAdmins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("companys");
                });

            modelBuilder.Entity("message", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<string>("attachchat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attachchat_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attachchat_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("chatid")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<string>("dateisnew")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("messagechat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("chatid");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("otp", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("verify_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("otps");
                });

            modelBuilder.Entity("template", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("myuserId")
                        .HasColumnType("bigint");

                    b.Property<string>("nationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("myuserId");

                    b.ToTable("templates");
                });

            modelBuilder.Entity("ticket", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<string>("creatorname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dateticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ticketnumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ticketdetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<string>("attachticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attachticket_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attachticket_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<string>("dateisnew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("messageticket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("seen")
                        .HasColumnType("bit");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("tiketid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tiketid");

                    b.ToTable("ticketdetails");
                });

            modelBuilder.Entity("user", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"), 1L, 1);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("allowId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("createdBy")
                        .HasColumnType("bigint");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("editeTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("editedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rempoteIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("setion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignChannel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CampaignModel", "Campaign")
                        .WithMany("CampaignChannels")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TelegramChannelModel", "Channel")
                        .WithMany("CampaignChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Channel");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignMusicSite", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CampaignModel", "Campaign")
                        .WithMany("CampaignMusicSites")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.MusicSiteModel", "MusicSite")
                        .WithMany("CampaignMusicSites")
                        .HasForeignKey("MusicSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("MusicSite");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignPage", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CampaignModel", "Campaign")
                        .WithMany("CampaignPages")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "Page")
                        .WithMany("CampaignPages")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Page");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoriteMusicSiteModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.MusicSiteModel", "MusicSite")
                        .WithMany("FavoriteMusicSites")
                        .HasForeignKey("MusicSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user", "User")
                        .WithMany("FavoriteMusicSites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicSite");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoritePagesModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "Pages")
                        .WithMany("FavoritePagesModels")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user", "User")
                        .WithMany("FavoritePages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.FavoriteTelegramChannelModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.TelegramChannelModel", "TelegramChannel")
                        .WithMany("FavoriteTelegramChannels")
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user", "User")
                        .WithMany("FavoriteTelegramChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.MusicSiteTarefeModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.MusicSiteModel", "MusicSite")
                        .WithMany("MusicSiteTarefeModel")
                        .HasForeignKey("MusicSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany("MusicSiteTarefeModel")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MusicSite");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PagesModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.PageTypeCategoryModel", "PageTypeCategory")
                        .WithMany("Pages")
                        .HasForeignKey("PageTypeCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("allAPIs.SimoAPI.Models.PageTypeModel", "PageType")
                        .WithMany("Pages")
                        .HasForeignKey("PageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PageType");

                    b.Navigation("PageTypeCategory");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTag", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "Page")
                        .WithMany("PageTags")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TagModel", "Tag")
                        .WithMany("PageTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTariffModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "Pages")
                        .WithMany("PageTariffModels")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany("PageTariffModels")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pages");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageVersion", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CampaignModel", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.ScreenshotModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CampaignModel", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TelegramChannelModel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("allAPIs.SimoAPI.Models.PagesModel", "InstagramPage")
                        .WithMany()
                        .HasForeignKey("InstagramPageId");

                    b.HasOne("allAPIs.SimoAPI.Models.MusicSiteModel", "MusicSite")
                        .WithMany()
                        .HasForeignKey("MusicSiteId");

                    b.HasOne("user", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Channel");

                    b.Navigation("InstagramPage");

                    b.Navigation("MusicSite");

                    b.Navigation("User");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelCombinedTariffModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.CombinedTariffModel", "CombinedTariff")
                        .WithMany("TelegramChannelCombinedTariffModels")
                        .HasForeignKey("CombinedTariffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TelegramChannelModel", "TelegramChannel")
                        .WithMany("TelegramChannelCombinedTariffModels")
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CombinedTariff");

                    b.Navigation("TelegramChannel");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelTariffModel", b =>
                {
                    b.HasOne("allAPIs.SimoAPI.Models.TarefeModel", "Tariff")
                        .WithMany("TelegramChannelTariffModels")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("allAPIs.SimoAPI.Models.TelegramChannelModel", "TelegramChannel")
                        .WithMany("TelegramChannelTariffModels")
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");

                    b.Navigation("TelegramChannel");
                });

            modelBuilder.Entity("message", b =>
                {
                    b.HasOne("chat", "chat")
                        .WithMany()
                        .HasForeignKey("chatid");

                    b.Navigation("chat");
                });

            modelBuilder.Entity("template", b =>
                {
                    b.HasOne("user", "myuser")
                        .WithMany()
                        .HasForeignKey("myuserId");

                    b.Navigation("myuser");
                });

            modelBuilder.Entity("ticketdetail", b =>
                {
                    b.HasOne("ticket", "ticket")
                        .WithMany()
                        .HasForeignKey("tiketid");

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CampaignModel", b =>
                {
                    b.Navigation("CampaignChannels");

                    b.Navigation("CampaignMusicSites");

                    b.Navigation("CampaignPages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.CombinedTariffModel", b =>
                {
                    b.Navigation("TelegramChannelCombinedTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.MusicSiteModel", b =>
                {
                    b.Navigation("CampaignMusicSites");

                    b.Navigation("FavoriteMusicSites");

                    b.Navigation("MusicSiteTarefeModel");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PagesModel", b =>
                {
                    b.Navigation("CampaignPages");

                    b.Navigation("FavoritePagesModels");

                    b.Navigation("PageTags");

                    b.Navigation("PageTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTypeCategoryModel", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.PageTypeModel", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TagModel", b =>
                {
                    b.Navigation("PageTags");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TarefeModel", b =>
                {
                    b.Navigation("MusicSiteTarefeModel");

                    b.Navigation("PageTariffModels");

                    b.Navigation("TelegramChannelTariffModels");
                });

            modelBuilder.Entity("allAPIs.SimoAPI.Models.TelegramChannelModel", b =>
                {
                    b.Navigation("CampaignChannels");

                    b.Navigation("FavoriteTelegramChannels");

                    b.Navigation("TelegramChannelCombinedTariffModels");

                    b.Navigation("TelegramChannelTariffModels");
                });

            modelBuilder.Entity("user", b =>
                {
                    b.Navigation("FavoriteMusicSites");

                    b.Navigation("FavoritePages");

                    b.Navigation("FavoriteTelegramChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
